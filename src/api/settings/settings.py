"""
Django settings for euskalmoneta project.

Generated by 'django-admin startproject' using Django 1.9.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os

import yaml  # PyYAML

CYCLOS_CONSTANTS = None
with open("/cyclos/cyclos_constants.yml", 'r') as cyclos_stream:
    try:
        CYCLOS_CONSTANTS = yaml.load(cyclos_stream)
    except yaml.YAMLError as exc:
        assert False, exc

DOLIBARR_CONSTANTS = None
with open("/dolibarr/dolibarr_constants.yml", 'r') as dolibarr_stream:
    try:
        DOLIBARR_CONSTANTS = yaml.load(dolibarr_stream)
    except yaml.YAMLError as exc:
        assert False, exc


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'kci-=2)4_qh#a3+k#xt!0)_t838t9zjcjpl#&09(&2&kftskr('

# SECURITY WARNING: don't run with debug turned on in production!
# You need to explicitly set DJANGO_DEBUG=True in docker-compose.yml (or environment variable) to have DEBUG on
DEBUG = os.environ.get('DJANGO_DEBUG', False)
if DEBUG and DEBUG in [True, 'true', 'True', 'yes', 'Yes']:
    DEBUG = True
else:
    DEBUG = False


ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'auth_token',
    'members',

    'bdc_cyclos',
    'bureauxdechange',

    'cel',

    'dolibarr_data',
    'euskalmoneta_data',

    'gestioninterne',

    'corsheaders',
    'wkhtmltopdf',
    # 'raven.contrib.django.raven_compat',
    'rest_framework.authtoken',
    'rest_framework',

    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'simple_history',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
]

ROOT_URLCONF = 'urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases
DATABASE_NAME = os.getenv('DATABASE_NAME', False)
if not DATABASE_NAME:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': DATABASE_NAME,
            'USER': os.environ.get('DATABASE_USER'),
            'PASSWORD': os.environ.get('DATABASE_PASSWORD'),
            'HOST': os.environ.get('DATABASE_HOST'),
            'PORT': '5432',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'fr'

LANGUAGES = (
    ('fr', 'Francais'),
    ('eu', 'Euskara'),
)

TIME_ZONE = 'Europe/Paris'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'

LOCALE_PATHS = (os.path.join(BASE_DIR, 'locale'), )

# Email
# https://docs.djangoproject.com/en/1.10/topics/email/
# Set EMAIL_HOST, EMAIL_PORT, etc. in docker-compose.yml.
# If EMAIL_HOST is not set or is empty, the console backend is used.
EMAIL_HOST = os.getenv('EMAIL_HOST', '')
EMAIL_NOTIFICATION_GESTION = os.getenv('EMAIL_NOTIFICATION_GESTION', '')
if EMAIL_HOST:
    EMAIL_PORT = os.getenv('EMAIL_PORT', 0)
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
    EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', False)
else:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Public URLs
API_PUBLIC_URL = os.environ.get('API_PUBLIC_URL')
DOLIBARR_PUBLIC_URL = os.environ.get('DOLIBARR_PUBLIC_URL')
BDC_PUBLIC_URL = os.environ.get('BDC_PUBLIC_URL')
GI_PUBLIC_URL = os.environ.get('GI_PUBLIC_URL')
CEL_PUBLIC_URL = os.environ.get('CEL_PUBLIC_URL')

# APIs URLs
UID = ''
PASS = ''
ODOO_URL = 'http://172.18.0.1'
ODOO_DB = '5thtry'
DOLIBARR_URL = 'http://dolibarr-app/api/index.php'
CYCLOS_URL = 'http://cyclos-app:8080/eusko/web-rpc'

# Euskal Moneta internal settings
DATE_COTISATION_ANTICIPEE = '01/11'  # 1er Novembre
if DEBUG:
    MINIMUM_PARRAINAGES_3_POURCENTS = 3  # En production, ce sera bien 30 parrainages et non PAS 3 !
else:
    MINIMUM_PARRAINAGES_3_POURCENTS = 30  # En production, ce sera bien 30 parrainages et non PAS 3 !

if 'https' in BDC_PUBLIC_URL:
    BDC_CORS_URL = BDC_PUBLIC_URL.replace('https://', '')
else:
    BDC_CORS_URL = BDC_PUBLIC_URL.replace('http://', '')

if 'https' in GI_PUBLIC_URL:
    GI_CORS_URL = GI_PUBLIC_URL.replace('https://', '')
else:
    GI_CORS_URL = GI_PUBLIC_URL.replace('http://', '')

if 'https' in CEL_PUBLIC_URL:
    CEL_CORS_URL = CEL_PUBLIC_URL.replace('https://', '')
else:
    CEL_CORS_URL = CEL_PUBLIC_URL.replace('http://', '')

# This is needed for Selenium tests to pass (we don't know the URL inside containers)
if DEBUG:
    CORS_ORIGIN_ALLOW_ALL = True
else:
    CORS_ORIGIN_WHITELIST = (
        BDC_CORS_URL,
        GI_CORS_URL,
        CEL_CORS_URL,
    )

# Raven + Logging
RAVEN_CONFIG = {
    'dsn': os.environ.get('RAVEN_CONFIG_DSN'),
    'release': 'dev' if DEBUG else 'production',
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'root': {
        'level': 'DEBUG',
        'handlers': ['console', 'sentry'],
    },
    'formatters': {
        'simple': {
            'format': '%(asctime)s %(levelname)s %(lineno)d %(name)s %(funcName)s '
                      '%(message)s'
        },
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s '
                      '%(process)d %(thread)d %(message)s'
        },
    },
    'handlers': {
        'sentry': {
            'level': 'WARNING',
            'class': 'logging.NullHandler',
            # 'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        }
    },
    'loggers': {
        'sentry': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'handlers': ['sentry'],
            'propagate': True,
        },
        'all': {
            'level': 'DEBUG' if DEBUG else 'INFO',
            'handlers': ['console', 'sentry'],
            'propagate': True,
        },
    },
}

if DEBUG:
    DEFAULT_RENDERER_CLASSES = (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    )
else:
    DEFAULT_RENDERER_CLASSES = (
        'rest_framework.renderers.JSONRenderer',
    )

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': DEFAULT_RENDERER_CLASSES,
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication'
    ],
    'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated'],
    'DEFAULT_PAGINATION_CLASS': 'pagination.CustomPagination',
    'PAGE_SIZE': 100,
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
}

WKHTMLTOPDF_DEBUG = True
WKHTMLTOPDF_CMD = 'xvfb-run /usr/bin/wkhtmltopdf'

APPS_ANONYMOUS_LOGIN = 'anonyme'
APPS_ANONYMOUS_PASSWORD = 'anonyme'

JWT_SECRET = 'secret'
